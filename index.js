import TelegramBot from 'node-telegram-bot-api';
import fetch from 'node-fetch';

// Configuration
const TELEGRAM_TOKEN = process.env.TELEGRAM_TOKEN || '7669255606:AAGPXEBWpbIbKw6ARdcnS1GLpRHUcPfRJL0';
const OPENAI_TOKEN = process.env.OPENAI_TOKEN || '===';

// Initialize bot
const bot = new TelegramBot(TELEGRAM_TOKEN, { polling: true });

// Track user states
const userStates = new Map();

// Image style options
const imageStyles = [
    '–†–µ–∞–ª–∏–∑–º',
    '–¶–∏—Ñ—Ä–æ–≤–æ–µ –∏—Å–∫—É—Å—Å—Ç–≤–æ',
    '–ö–æ–º–∏–∫—Å',
    '–ê–∫–≤–∞—Ä–µ–ª—å',
    '–ê–Ω–∏–º–µ', 
    '–ö–∞—Ä—Ç–∏–Ω–∞ –º–∞—Å–ª–æ–º',
    '3D'
];

// Main menu options
const mainMenuMarkup = {
    reply_markup: {
        inline_keyboard: [
            [{ text: '–°–≥–µ–Ω–µ—Ä–∏—Ä—É–π –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –ø–æ—Å—Ç–∞', callback_data: 'gen_image' }],
            [{ text: '‚Å†–°–≥–µ–Ω–µ—Ä–∏—Ä—É–π —Ç–µ–∫—Å—Ç –¥–ª—è –ø–æ—Å—Ç–∞', callback_data: 'gen_text' }],
            [{ text: '‚Å†–°–≥–µ–Ω–µ—Ä–∏—Ä—É–π —Ü–µ–ª—ã–π –ø–æ—Å—Ç –Ω–∞ —Ç–µ–º—É', callback_data: 'gen_both' }]
        ]
    }
};

// Image style keyboard
const styleMarkup = {
    reply_markup: {
        inline_keyboard: imageStyles.map(style => ([
            { text: style, callback_data: `style_${style}` }
        ]))
    }
};

// Regeneration options for image
const imageRegenerationMarkup = {
    reply_markup: {
        inline_keyboard: [
            [{ text: 'üó∫Ô∏è –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ–≤—Ç–æ—Ä–Ω–æ', callback_data: 'regen_image' }],
            [{ text: 'üë®‚Äçüíº –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'main_menu' }]
        ]
    }
};

// Regeneration options for text
const textRegenerationMarkup = {
    reply_markup: {
        inline_keyboard: [
            [{ text: '‚úçüèæ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–∫—Å—Ç –ø–æ–≤—Ç–æ—Ä–Ω–æ', callback_data: 'regen_text' }],
            [{ text: 'üë®‚Äçüíº –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'main_menu' }]
        ]
    }
};

// Regeneration options for combined
const combinedRegenerationMarkup = {
    reply_markup: {
        inline_keyboard: [
            [{ text: 'üë®‚Äçüíº –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'main_menu' }]
        ]
    }
};

// Start command handler
bot.onText(/\/start/, (msg) => {
    const chatId = msg.chat.id;
    userStates.set(chatId, { step: 'main_menu' });
    bot.sendMessage(chatId, 'ü§ù –ü—Ä–∏–≤–µ—Ç, –º–æ–π –¥—Ä—É–≥! –≠—Ç–æ –ì–µ–Ω–µ—Ä–µ–π –ê–¥–≤–µ—Ä—Ä–µ–∑–∞–ª—Ç–æ–≤–∏—á - —Ç–≤–æ–π –ª–∏—á–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ —Å –∫–æ–Ω—Ç–µ–Ω—Ç–æ–º! –í—ã–±–∏—Ä–∞–π, —á–µ–º —è –ø–æ–ª–µ–∑–µ–Ω —Ç–µ–±–µ –≤ –¥–∞–Ω–Ω—É—é –º–∏–Ω—É—Ç—É: ', mainMenuMarkup);
});

// Callback query handler
bot.on('callback_query', async (callbackQuery) => {
    const chatId = callbackQuery.message.chat.id;
    const data = callbackQuery.data;
    const state = userStates.get(chatId);

    // Answer callback query to remove loading state
    await bot.answerCallbackQuery(callbackQuery.id);

    if (state?.step === 'generating') {
        bot.sendMessage(chatId, '–ò–¥–µ—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏—è, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –ø–æ–¥–æ–∂–¥–∏—Ç–µ...');
        return;
    }

    if (data === 'main_menu') {
        userStates.set(chatId, { step: 'main_menu' });
        bot.sendMessage(chatId, '–ß—Ç–æ –±—ã –≤—ã —Ö–æ—Ç–µ–ª–∏ —Å–æ–∑–¥–∞—Ç—å?', mainMenuMarkup);
        return;
    }

    // Handle generation type selection
    if (data.startsWith('gen_')) {
        switch (data) {
            case 'gen_image':
                userStates.set(chatId, { step: 'image_description' });
                bot.sendMessage(chatId, 'üòâ –û–ø—Ä–µ–¥–µ–ª–∏—Å—å –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ —Å —Ç–µ–º–æ–π –∏ –æ–ø–∏—à–∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ —Ç–æ—á–Ω–æ –∑–∞–¥–∞—á—É –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è. –ü–∏—à–∏ –ø–æ–Ω—è—Ç–Ω–æ –∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –ø—Ä–æ—Å—Ç–æ, —á—Ç–æ–±—ã —è —Ç–µ–±—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ –ø–æ–Ω—è–ª! –ë–ª–∞–≥–æ–¥–∞—Ä—é!');
                break;
            case 'gen_text':
                userStates.set(chatId, { step: 'text_description' });
                bot.sendMessage(chatId, 'üòá –û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –Ω—É–∂–µ–Ω —Ç–µ–∫—Å—Ç, –∏–∑ –æ—Å–Ω–æ–≤—ã –∫–æ—Ç–æ—Ä–æ–≥–æ, —è —Å–æ–∑–¥–∞–º –¥–ª—è —Ç–µ–±—è –ª–æ–≥–∏—á–µ—Å–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∫ –ø–æ—Å—Ç—É –¥–ª—è —Ç–≤–æ–µ–π –∫–æ–º–ø–∞–Ω–∏–∏! –£–∂–µ –æ–∂–∏–¥–∞—é!');
                break;
            case 'gen_both':
                userStates.set(chatId, { step: 'combined_image_description' });
                bot.sendMessage(chatId, 'üòâ –û–ø—Ä–µ–¥–µ–ª–∏—Å—å –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ —Å —Ç–µ–º–æ–π –∏ –æ–ø–∏—à–∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ —Ç–æ—á–Ω–æ –∑–∞–¥–∞—á—É –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è. –ü–∏—à–∏ –ø–æ–Ω—è—Ç–Ω–æ –∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –ø—Ä–æ—Å—Ç–æ, —á—Ç–æ–±—ã —è —Ç–µ–±—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ –ø–æ–Ω—è–ª! –ë–ª–∞–≥–æ–¥–∞—Ä—é!');
                break;
        }
        return;
    }

    // Handle style selection
    if (data.startsWith('style_')) {
        const style = data.replace('style_', '');
        if (state.step === 'combined_style') {
            await handleCombinedStyle(chatId, style);
        } else {
            await handleImageStyle(chatId, style);
        }
        return;
    }

    // Handle regeneration
    if (data.startsWith('regen_')) {
        switch (data) {
            case 'regen_image':
                if (state.lastImageDescription && state.lastImageStyle) {
                    await handleImageStyle(chatId, state.lastImageStyle);
                }
                break;
            case 'regen_text':
                if (state.lastTextDescription) {
                    await handleTextDescription(chatId, state.lastTextDescription);
                }
                break;
            case 'regen_both':
                if (state.lastImageDescription && state.lastTextDescription) {
                    await handleCombinedTextDescription(chatId, state.lastTextDescription);
                }
                break;
        }
    }
});

// Message handler
bot.on('message', async (msg) => {
    if (msg.text?.startsWith('/')) return; // Ignore commands
    
    const chatId = msg.chat.id;
    const text = msg.text;
    const currentState = userStates.get(chatId) || { step: 'main_menu' };

    if (currentState.step === 'generating') {
        bot.sendMessage(chatId, '–ò–¥–µ—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏—è, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –ø–æ–¥–æ–∂–¥–∏—Ç–µ...');
        return;
    }

    switch (currentState.step) {
        case 'image_description':
            await handleImageDescription(chatId, text);
            break;
        case 'text_description':
            await handleTextDescription(chatId, text);
            break;
        case 'combined_image_description':
            await handleCombinedImageDescription(chatId, text);
            break;
        case 'combined_text_description':
            await handleCombinedTextDescription(chatId, text);
            break;
    }
});

// Handle image description input
async function handleImageDescription(chatId, text) {
    const state = userStates.get(chatId);
    userStates.set(chatId, { 
        ...state,
        step: 'image_style',
        imageDescription: text,
        lastImageDescription: text
    });
    bot.sendMessage(chatId, '–í—ã–±–µ—Ä–µ—Ç–µ —Å—Ç–∏–ª—å –≤ –∫–æ—Ç–æ—Ä–æ–º –≤–∞–º –Ω—É–∂–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ:', styleMarkup);
}

// Handle image style selection
async function handleImageStyle(chatId, style) {
    const state = userStates.get(chatId);
    userStates.set(chatId, { 
        ...state,
        step: 'generating',
        lastImageStyle: style 
    });
    
    try {
        bot.sendMessage(chatId, 'üó∫Ô∏è –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è! –ù—É–∂–Ω–æ –Ω–µ–º–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏!')
        const imageUrl = await generateImage(`${state.imageDescription} in style: ${style}`);
        await bot.sendPhoto(chatId, imageUrl);
        userStates.set(chatId, { ...state, step: 'regeneration' });
        bot.sendMessage(chatId, '–ß—Ç–æ –±—ã –≤—ã —Ö–æ—Ç–µ–ª–∏ —Å–¥–µ–ª–∞—Ç—å –¥–∞–ª—å—à–µ?', combinedRegenerationMarkup);
    } catch (error) {
        handleError(chatId, error);
    }
}

// Handle text description input
async function handleTextDescription(chatId, text) {
    const state = userStates.get(chatId);
    userStates.set(chatId, { 
        ...state,
        step: 'generating',
        lastTextDescription: text 
    });
    
    try {
        bot.sendMessage(chatId, '–ò–¥–µ—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–∞')
        const generatedText = await generateText(text);
        bot.sendMessage(chatId, generatedText);
        userStates.set(chatId, { ...state, step: 'regeneration' });
        bot.sendMessage(chatId, '–ß—Ç–æ –±—ã –≤—ã —Ö–æ—Ç–µ–ª–∏ —Å–¥–µ–ª–∞—Ç—å –¥–∞–ª—å—à–µ?', combinedRegenerationMarkup);
    } catch (error) {
        handleError(chatId, error);
    }
}

// Handle combined generation steps
async function handleCombinedImageDescription(chatId, text) {
    const state = userStates.get(chatId);
    userStates.set(chatId, {
        ...state,
        step: 'combined_style',
        imageDescription: text,
        lastImageDescription: text
    });
    bot.sendMessage(chatId, '–í—ã–±–µ—Ä–µ—Ç–µ —Å—Ç–∏–ª—å –≤ –∫–æ—Ç–æ—Ä–æ–º –≤–∞–º –Ω—É–∂–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ:', styleMarkup);
}

async function handleCombinedStyle(chatId, style) {
    const state = userStates.get(chatId);
    userStates.set(chatId, {
        ...state,
        step: 'combined_text_description',
        imageStyle: style,
        lastImageStyle: style
    });
    bot.sendMessage(chatId, 'üòá –û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –Ω—É–∂–µ–Ω —Ç–µ–∫—Å—Ç, –∏–∑ –æ—Å–Ω–æ–≤—ã –∫–æ—Ç–æ—Ä–æ–≥–æ, —è —Å–æ–∑–¥–∞–º –¥–ª—è —Ç–µ–±—è –ª–æ–≥–∏—á–µ—Å–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∫ –ø–æ—Å—Ç—É –¥–ª—è —Ç–≤–æ–µ–π –∫–æ–º–ø–∞–Ω–∏–∏! –£–∂–µ –æ–∂–∏–¥–∞—é!');
}

async function handleCombinedTextDescription(chatId, text) {
    const state = userStates.get(chatId);
    userStates.set(chatId, { 
        ...state,
        step: 'generating',
        lastTextDescription: text
    });
    
    try {
        bot.sendMessage(chatId, '–ò–¥–µ—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–æ—Å—Ç–∞, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –ø–æ–¥–æ–∂–¥–∏—Ç–µ')
        const [imageUrl, generatedText] = await Promise.all([
            generateImage(`${state.imageDescription} in style: ${state.imageStyle}`),
            generateText(text)
        ]);
        
        await bot.sendPhoto(chatId, imageUrl);
        await bot.sendMessage(chatId, generatedText);
        
        userStates.set(chatId, { ...state, step: 'regeneration' });
        bot.sendMessage(chatId, '–ß—Ç–æ –±—ã –≤—ã —Ö–æ—Ç–µ–ª–∏ —Å–¥–µ–ª–∞—Ç—å –¥–∞–ª—å—à–µ?', combinedRegenerationMarkup);
    } catch (error) {
        handleError(chatId, error);
    }
}

// OpenAI API functions
async function generateImage(prompt) {
    const response = await fetch('https://api.openai.com/v1/images/generations', {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json',
            'Authorization': `Bearer ${OPENAI_TOKEN}`
        },
        body: JSON.stringify({
            model: "dall-e-3",
            quality: 'hd',
            prompt: prompt,
            n: 1,
            size: "1024x1024"
        })
    });

    if (!response.ok) {
        throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ');
    }

    const data = await response.json();
    return data.data[0].url;
}

async function generateText(prompt) {
    const response = await fetch('https://api.openai.com/v1/chat/completions', {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json',
            'Authorization': `Bearer ${OPENAI_TOKEN}`
        },
        body: JSON.stringify({
            model: "gpt-4",
            messages: [
                {
                    role: "user",
                    content: `–°–æ–∑–¥–∞–π —Ç–µ–∫—Å—Ç –¥–ª—è –ø–æ—Å—Ç–∞ –Ω–∞ —Ç–µ–º—É "${prompt}". –¢–∞–∫ –∂–µ –¥–æ–±–∞–≤—å —Å–º–∞–π–ª–∏–∫–æ–≤ –∏ –∫—Ä–∞—Å–∏–≤–æ –æ—Ñ–æ—Ä–º—å –µ–≥–æ.`
                }
            ]
        })
    });

    if (!response.ok) {
        throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–∫—Å—Ç');
    }

    const data = await response.json();
    return data.choices[0].message.content;
}

// Error handler
function handleError(chatId, error) {
    console.error('Error:', error);
    userStates.set(chatId, { step: 'main_menu' });
    bot.sendMessage(chatId, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:', mainMenuMarkup);
}

// Start the bot
console.log('Bot is running...');  
